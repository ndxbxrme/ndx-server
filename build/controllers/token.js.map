{
  "version": 3,
  "file": "token.js",
  "sourceRoot": "../../src/controllers/",
  "sources": [
    "token.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\r\n\r\ncrypto = require 'crypto-js'\r\nbcrypt = require 'bcrypt-nodejs'\r\n\r\nmodule.exports = (ndx) ->\r\n  publicRoutes = ['/api/login', '/api/signup', '/api/logout', '/api/download']\r\n  ndx.addPublicRoute = (route) ->\r\n    publicRoutes.push route\r\n  ndx.generateHash = (password) ->\r\n    bcrypt.hashSync password, bcrypt.genSaltSync(8), null\r\n  ndx.validPassword = (password, localPassword) ->\r\n    bcrypt.compareSync password, localPassword\r\n  ndx.postAuthenticate = (req, res, next) ->\r\n    ndx.setAuthCookie req, res\r\n    res.send req.user._id\r\n  ndx.authenticate = () ->\r\n    (req, res, next) ->\r\n      if ndx.user\r\n        return next()\r\n      else\r\n        throw ndx.UNAUTHORIZED\r\n      return\r\n  ndx.generateToken = (userId, ip, expiresHours, skipIp) ->\r\n    expiresHours = expiresHours or 5\r\n    text = userId + '||' + new Date(new Date().setHours(new Date().getHours() + expiresHours)).toString()\r\n    if ndx.settings.IP_ENCRYPT and not skipIp\r\n      text = crypto.Rabbit.encrypt(text, ip).toString()\r\n    text = crypto.Rabbit.encrypt(text, ndx.settings.SESSION_SECRET).toString()\r\n    text\r\n  ndx.parseToken = (token, skipIp) ->\r\n    if not token\r\n      return null\r\n    decrypted = ''\r\n    try\r\n      decrypted = crypto.Rabbit.decrypt(token, ndx.settings.SESSION_SECRET).toString(crypto.enc.Utf8)\r\n      if decrypted and ndx.settings.IP_ENCRYPT and not skipIp\r\n        decrypted = crypto.Rabbit.decrypt(decrypted, req.ip).toString(crypto.enc.Utf8)\r\n    catch e\r\n    if decrypted.indexOf('||') isnt -1\r\n      bits = decrypted.split '||'\r\n      if bits.length is 2\r\n        d = new Date bits[1]\r\n        if d.toString() isnt 'Invalid Date'\r\n          if d.valueOf() > new Date().valueOf()\r\n            return bits[0]\r\n    return null\r\n  ndx.setAuthCookie = (req, res) ->\r\n    if ndx.user\r\n      cookieText = ndx.generateToken ndx.user[ndx.settings.AUTO_ID], req.ip\r\n      res.encToken = cookieText\r\n      res.cookie 'token', cookieText, maxAge: 7 * 24 * 60 * 60 * 1000  \r\n    return\r\n  ndx.app.use '/*', (req, res, next) ->\r\n    if req.headers.ndxhost\r\n      ndx.host = req.headers.ndxhost\r\n    else\r\n      ndx.host = ndx.host or process.env.HOST or ndx.settings.HOST or \"#{req.protocol}://#{req.hostname}\"\r\n    res.set 'Server-Id', ndx.id\r\n    next()\r\n  ndx.app.use '/api/*', (req, res, next) ->\r\n    ndx.user = null\r\n    if req.method is 'OPTIONS'\r\n      return next()\r\n    if not ndx.database.maintenance()\r\n      isCookie = false\r\n      token = ''\r\n      impersonating = null\r\n      if req.cookies and req.cookies.token\r\n        token = req.cookies.token\r\n        isCookie = true\r\n      else if req.headers and req.headers.authorization\r\n        parts = req.headers.authorization.split ' '\r\n        if parts.length is 2\r\n          scheme = parts[0]\r\n          credentials = parts[1]\r\n          if /^Bearer$/i.test scheme\r\n            token = credentials\r\n      if req.cookies.impersonate\r\n        impersonating = (crypto.Rabbit.decrypt(req.cookies.impersonate, ndx.settings.SESSION_SECRET).toString(crypto.enc.Utf8) or '').split('||')[0]\r\n      userId = ndx.parseToken token\r\n      if userId\r\n        where = {}\r\n        where[ndx.settings.AUTO_ID] = userId\r\n        ndx.database.select ndx.settings.USER_TABLE, where, (users) ->\r\n          if users and users.length\r\n            if not ndx.user\r\n              ndx.user = {}\r\n            if Object.prototype.toString.call(ndx.user) is '[object Object]'\r\n              ndx.extend ndx.user, users[0]\r\n            else\r\n              ndx.user = users[0]\r\n            ndx.user.ip = req.ip\r\n            ndx.user.impersonatedBy = impersonating if impersonating\r\n            req.user = ndx.user\r\n            if isCookie\r\n              ndx.setAuthCookie req, res\r\n            users = null\r\n          next()\r\n        , true\r\n      else\r\n        if ndx.settings.ANONYMOUS_USER and req.headers['anon-id']\r\n          user = await ndx.database.select ndx.settings.USER_TABLE, _id:req.headers['anon-id']\r\n          if not user\r\n            user =\r\n              email: 'anon@user.com'\r\n              local:\r\n                email: 'anon@user.com'\r\n              roles:\r\n                anon: true\r\n              type: 'anon'\r\n              _id: req.headers['anon-id']\r\n          ndx.user = user\r\n          ndx.user.ip = req.ip\r\n          ndx.user.impersonatedBy = impersonating if impersonating\r\n          req.user = ndx.user\r\n          return next()\r\n        for route in publicRoutes\r\n          if new RegExp(route).test req.originalUrl\r\n            return next()\r\n        throw ndx.UNAUTHORIZED"
  ]
}